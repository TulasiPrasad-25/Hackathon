[
    
    {
        "id": "tcs-apt-1",
        "companyId": "tcs",
        "roundId": "tcs-aptitude",
        "type": "aptitude",
        "difficulty": "easy",
        "title": "Percentage Calculation",
        "question": "If the price of sugar increases by 20%, by how much percentage should a family reduce its consumption so that the expenditure remains the same?",
        "answer": "16.67%. Formula: (100*r)/(100+r) where r is percentage increase."
    },
    {
        "id": "tcs-tech-1",
        "companyId": "tcs",
        "roundId": "tcs-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "Palindrome Check",
        "question": "Write a function to check if a string is a palindrome.",
        "answer": "```python\ndef is_palindrome(s):\n    return s == s[::-1]\n```"
    },
    {
        "id": "infosys-apt-1",
        "companyId": "infosys",
        "roundId": "infosys-aptitude",
        "type": "aptitude",
        "difficulty": "medium",
        "title": "Time and Work",
        "question": "A can complete a work in 12 days, B in 15 days. In how many days will they complete the work together?",
        "answer": "6.66 days. Formula: (A*B)/(A+B) = (12*15)/(12+15) = 180/27 ≈ 6.66"
    },
    {
        "id": "infosys-tech-1",
        "companyId": "infosys",
        "roundId": "infosys-technical",
        "type": "technical",
        "difficulty": "easy",
        "title": "Fibonacci Series",
        "question": "Write a program to print the Fibonacci series up to n terms.",
        "answer": "```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        print(a, end=' ')\n        a, b = b, a+b\n```"
    },
    {
        "id": "google-oa-1",
        "companyId": "google",
        "roundId": "google-oa",
        "type": "technical",
        "difficulty": "hard",
        "title": "Two Sum",
        "question": "Given an array of integers, return indices of the two numbers that add up to a specific target.",
        "answer": "```python\ndef two_sum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []\n```"
    },
    {
        "id": "google-tech-1",
        "companyId": "google",
        "roundId": "google-technical",
        "type": "technical",
        "difficulty": "hard",
        "title": "LRU Cache",
        "question": "Design and implement an LRU (Least Recently Used) cache.",
        "answer": "```python\nfrom collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n\n    def get(self, key):\n        if key not in self.cache:\n            return -1\n        self.cache.move_to_end(key)\n        return self.cache[key]\n\n    def put(self, key, value):\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        self.cache[key] = value\n        if len(self.cache) > self.capacity:\n            self.cache.popitem(last=False)\n```"
    },
    {
        "id": "amazon-oa-1",
        "companyId": "amazon",
        "roundId": "amazon-oa",
        "type": "technical",
        "difficulty": "medium",
        "title": "Merge Intervals",
        "question": "Given a collection of intervals, merge all overlapping intervals.",
        "answer": "```python\ndef merge(intervals):\n    intervals.sort(key=lambda x: x[0])\n    merged = []\n    for interval in intervals:\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    return merged\n```"
    },
    {
        "id": "amazon-tech-1",
        "companyId": "amazon",
        "roundId": "amazon-technical",
        "type": "technical",
        "difficulty": "hard",
        "title": "Design Parking Lot",
        "question": "Design a parking lot using object-oriented principles.",
        "answer": "```python\nclass ParkingLot:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.available = capacity\n        self.vehicles = {}\n\n    def park_vehicle(self, vehicle):\n        if self.available <= 0:\n            return False\n        self.vehicles[vehicle.license] = vehicle\n        self.available -= 1\n        return True\n\n    def exit_vehicle(self, license):\n        if license in self.vehicles:\n            del self.vehicles[license]\n            self.available += 1\n            return True\n        return False\n```"
    },


    {
        "id": "wipro-apt-1",
        "companyId": "wipro",
        "roundId": "wipro-aptitude",
        "type": "aptitude",
        "difficulty": "easy",
        "title": "Time Calculation",
        "question": "At what time between 3 and 4 will the minute hand be 4 minutes ahead of the hour hand?",
        "answer": "At 3:24. The minute hand gains 55 minutes over the hour hand in 60 minutes. For 4 minutes difference: (60/55)*4 ≈ 24 minutes."
    },
    {
        "id": "wipro-apt-2",
        "companyId": "wipro",
        "roundId": "wipro-aptitude",
        "type": "aptitude",
        "difficulty": "medium",
        "title": "Profit and Loss",
        "question": "A shopkeeper sells an item at 20% profit. If he had bought it at 10% less and sold for Rs. 18 less, he would have gained 25%. Find the original cost price.",
        "answer": "Rs. 400. Let CP = x, then SP = 1.2x. New CP = 0.9x, new SP = 1.2x - 18. Given (1.2x-18-0.9x)/0.9x = 0.25. Solving gives x = 400."
    },
    {
        "id": "wipro-essay-1",
        "companyId": "wipro",
        "roundId": "wipro-essay",
        "type": "essay",
        "difficulty": "easy",
        "title": "Technology Impact",
        "question": "Write a 200-word essay on how artificial intelligence is transforming industries.",
        "answer": "Artificial intelligence (AI) is revolutionizing industries by automating processes, enhancing decision-making, and creating new opportunities. In healthcare, AI enables faster diagnosis through medical imaging analysis. The finance sector uses AI for fraud detection and algorithmic trading. Manufacturing benefits from predictive maintenance and quality control. Retailers leverage AI for personalized recommendations and inventory management. While AI brings efficiency, it also raises concerns about job displacement and ethical implications that need addressing."
    },
    {
        "id": "wipro-tech-1",
        "companyId": "wipro",
        "roundId": "wipro-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "Linked List Reverse",
        "question": "Write a function to reverse a linked list iteratively.",
        "answer": "```python\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    return prev\n```"
    },
    {
        "id": "wipro-tech-2",
        "companyId": "wipro",
        "roundId": "wipro-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "SQL Query",
        "question": "Write a SQL query to find the second highest salary from an Employee table.",
        "answer": "```sql\nSELECT MAX(salary) FROM Employee \nWHERE salary < (SELECT MAX(salary) FROM Employee);\n```"
    },
    {
        "id": "wipro-tech-3",
        "companyId": "wipro",
        "roundId": "wipro-technical",
        "type": "technical",
        "difficulty": "easy",
        "title": "String Palindrome",
        "question": "Write a function to check if a string is palindrome without using extra space.",
        "answer": "```python\ndef is_palindrome(s):\n    left, right = 0, len(s)-1\n    while left < right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n```"
    },
    {
        "id": "wipro-tech-4",
        "companyId": "wipro",
        "roundId": "wipro-technical",
        "type": "technical",
        "difficulty": "hard",
        "title": "Binary Tree Traversal",
        "question": "Implement inorder traversal without recursion.",
        "answer": "```python\ndef inorder_traversal(root):\n    stack = []\n    result = []\n    current = root\n    while current or stack:\n        while current:\n            stack.append(current)\n            current = current.left\n        current = stack.pop()\n        result.append(current.val)\n        current = current.right\n    return result\n```"
    },
    {
        "id": "wipro-tech-5",
        "companyId": "wipro",
        "roundId": "wipro-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "Database Normalization",
        "question": "What is normalization and explain 1NF, 2NF and 3NF?",
        "answer": "Normalization organizes data to minimize redundancy. 1NF: Each table cell should contain atomic values. 2NF: Should be in 1NF and all non-key attributes fully functionally dependent on primary key. 3NF: Should be in 2NF and no transitive dependency (non-prime attributes shouldn't depend on other non-prime attributes)."
    },
    {
        "id": "wipro-tech-6",
        "companyId": "wipro",
        "roundId": "wipro-technical",
        "type": "technical",
        "difficulty": "easy",
        "title": "Prime Number Check",
        "question": "Write a function to check if a number is prime.",
        "answer": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n```"
    },

    {
        "id": "accenture-cog-1",
        "companyId": "accenture",
        "roundId": "accenture-cognitive",
        "type": "reasoning",
        "difficulty": "medium",
        "title": "Pattern Recognition",
        "question": "Complete the series: 2, 5, 10, 17, 26, ?",
        "answer": "37 (Sequence follows n² + 1 where n starts from 1)"
    },
    {
        "id": "accenture-cog-2",
        "companyId": "accenture",
        "roundId": "accenture-cognitive",
        "type": "reasoning",
        "difficulty": "hard",
        "title": "Logical Deduction",
        "question": "All roses are flowers. Some flowers fade quickly. Therefore:",
        "answer": "Some roses may fade quickly. (This is a valid conclusion from the given statements)"
    },
    {
        "id": "accenture-cog-3",
        "companyId": "accenture",
        "roundId": "accenture-cognitive",
        "type": "reasoning",
        "difficulty": "medium",
        "title": "Blood Relations",
        "question": "Pointing to a woman, a man said 'Her brother's father is my wife's son'. How is the man related to the woman?",
        "answer": "The man is the woman's grandfather."
    },
    {
        "id": "accenture-tech-1",
        "companyId": "accenture",
        "roundId": "accenture-technical",
        "type": "technical",
        "difficulty": "hard",
        "title": "Database Design",
        "question": "Design a schema for an e-commerce platform with products, users, and orders.",
        "answer": "Tables needed:\n1. Users (user_id, name, email)\n2. Products (product_id, name, price)\n3. Orders (order_id, user_id, date)\n4. Order_Items (order_id, product_id, quantity)"
    },
    {
        "id": "accenture-tech-2",
        "companyId": "accenture",
        "roundId": "accenture-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "API Design",
        "question": "Design REST API endpoints for a blog platform with posts and comments.",
        "answer": "Endpoints:\n- GET /posts - List all posts\n- POST /posts - Create new post\n- GET /posts/{id} - Get single post\n- GET /posts/{id}/comments - Get comments for post\n- POST /posts/{id}/comments - Add comment to post\n- PUT /comments/{id} - Update comment\n- DELETE /comments/{id} - Delete comment"
    },
    {
        "id": "accenture-tech-3",
        "companyId": "accenture",
        "roundId": "accenture-technical",
        "type": "technical",
        "difficulty": "easy",
        "title": "String Manipulation",
        "question": "Write a function to count the number of vowels in a string.",
        "answer": "```python\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)\n```"
    },
    {
        "id": "accenture-tech-4",
        "companyId": "accenture",
        "roundId": "accenture-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "System Design",
        "question": "How would you design a URL shortening service like bit.ly?",
        "answer": "Components:\n1. URL shortening algorithm (hash original URL)\n2. Database to store mappings\n3. Cache layer for frequent URLs\n4. Analytics tracking\n5. Distributed system for high availability\n6. Auto-expiration for old URLs"
    },
    {
        "id": "accenture-tech-5",
        "companyId": "accenture",
        "roundId": "accenture-technical",
        "type": "technical",
        "difficulty": "hard",
        "title": "Concurrency",
        "question": "What is a race condition and how can you prevent it?",
        "answer": "Race condition occurs when multiple threads access shared data concurrently leading to unpredictable results. Prevention methods:\n1. Synchronization (locks/mutexes)\n2. Atomic operations\n3. Thread-safe data structures\n4. Immutable objects\n5. Proper thread communication mechanisms"
    },
    {
        "id": "accenture-tech-6",
        "companyId": "accenture",
        "roundId": "accenture-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "OOP Concepts",
        "question": "Explain polymorphism with an example.",
        "answer": "Polymorphism allows objects of different classes to be treated as objects of a common superclass. Example:\n```python\nclass Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Bark!'\n\nclass Cat(Animal):\n    def speak(self):\n        return 'Meow!'\n\n# Polymorphic behavior\nanimals = [Dog(), Cat()]\nfor animal in animals:\n    print(animal.speak())\n```"
    },

    {
        "id": "microsoft-oa-1",
        "companyId": "microsoft",
        "roundId": "microsoft-oa",
        "type": "technical",
        "difficulty": "hard",
        "title": "Meeting Rooms II",
        "question": "Given an array of meeting time intervals, find the minimum number of conference rooms required.",
        "answer": "```python\ndef min_meeting_rooms(intervals):\n    starts = sorted(i[0] for i in intervals)\n    ends = sorted(i[1] for i in intervals)\n    res = count = 0\n    s = e = 0\n    while s < len(intervals):\n        if starts[s] < ends[e]:\n            count += 1\n            s += 1\n        else:\n            count -= 1\n            e += 1\n        res = max(res, count)\n    return res\n```"
    },
    {
        "id": "microsoft-oa-2",
        "companyId": "microsoft",
        "roundId": "microsoft-oa",
        "type": "technical",
        "difficulty": "hard",
        "title": "Word Search II",
        "question": "Given an m x n board of characters and a list of words, return all words on the board.",
        "answer": "```python\ndef findWords(board, words):\n    WORD_KEY = '$'\n    trie = {}\n    for word in words:\n        node = trie\n        for letter in word:\n            node = node.setdefault(letter, {})\n        node[WORD_KEY] = word\n    \n    result = []\n    \n    def backtrack(row, col, parent):\n        letter = board[row][col]\n        curr_node = parent[letter]\n        \n        word_match = curr_node.pop(WORD_KEY, False)\n        if word_match:\n            result.append(word_match)\n        \n        board[row][col] = '#'\n        \n        for (row_offset, col_offset) in [(-1, 0), (0, 1), (1, 0), (0, -1)]:\n            new_row, new_col = row + row_offset, col + col_offset\n            if new_row < 0 or new_row >= len(board) or new_col < 0 or new_col >= len(board[0]):\n                continue\n            if board[new_row][new_col] not in curr_node:\n                continue\n            backtrack(new_row, new_col, curr_node)\n        \n        board[row][col] = letter\n        \n        if not curr_node:\n            parent.pop(letter)\n    \n    for row in range(len(board)):\n        for col in range(len(board[0])):\n            if board[row][col] in trie:\n                backtrack(row, col, trie)\n    \n    return result\n```"
    },
    {
        "id": "microsoft-tech-1",
        "companyId": "microsoft",
        "roundId": "microsoft-technical",
        "type": "technical",
        "difficulty": "hard",
        "title": "Design Excel",
        "question": "Design a data structure that represents a spreadsheet (like Excel) with cells that can contain numbers or formulas.",
        "answer": "```python\nclass Excel:\n    def __init__(self, height, width):\n        self.matrix = [[{'value': 0, 'formula': None} \n                       for _ in range(ord(width)-ord('A')+1)] \n                      for _ in range(height)]\n    \n    def set(self, row, column, val):\n        self.matrix[row-1][ord(column)-ord('A')] = {'value': val, 'formula': None}\n    \n    def get(self, row, column):\n        cell = self.matrix[row-1][ord(column)-ord('A')]\n        if cell['formula']:\n            return self.evaluate_formula(cell['formula'])\n        return cell['value']\n    \n    def set_formula(self, row, column, formula):\n        self.matrix[row-1][ord(column)-ord('A')]['formula'] = formula\n    \n    def evaluate_formula(self, formula):\n        # Implement formula evaluation (e.g., SUM, AVG, etc.)\n        pass\n```"
    },
    {
        "id": "microsoft-tech-2",
        "companyId": "microsoft",
        "roundId": "microsoft-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "Clone Graph",
        "question": "Given a reference of a node in a connected undirected graph, return a deep copy of the graph.",
        "answer": "```python\nclass Node:\n    def __init__(self, val=0, neighbors=None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\ndef cloneGraph(node):\n    if not node:\n        return None\n    \n    visited = {}\n    \n    def dfs(original):\n        if original in visited:\n            return visited[original]\n        \n        clone = Node(original.val)\n        visited[original] = clone\n        \n        for neighbor in original.neighbors:\n            clone.neighbors.append(dfs(neighbor))\n        \n        return clone\n    \n    return dfs(node)\n```"
    },
    {
        "id": "microsoft-tech-3",
        "companyId": "microsoft",
        "roundId": "microsoft-technical",
        "type": "technical",
        "difficulty": "hard",
        "title": "Serialize and Deserialize Binary Tree",
        "question": "Design an algorithm to serialize and deserialize a binary tree.",
        "answer": "```python\nclass Codec:\n    def serialize(self, root):\n        def rserialize(root, string):\n            if not root:\n                string += 'None,'\n            else:\n                string += str(root.val) + ','\n                string = rserialize(root.left, string)\n                string = rserialize(root.right, string)\n            return string\n        \n        return rserialize(root, '')\n\n    def deserialize(self, data):\n        def rdeserialize(l):\n            if l[0] == 'None':\n                l.pop(0)\n                return None\n            \n            root = TreeNode(l[0])\n            l.pop(0)\n            root.left = rdeserialize(l)\n            root.right = rdeserialize(l)\n            return root\n        \n        data_list = data.split(',')\n        return rdeserialize(data_list)\n```"
    },
    {
        "id": "microsoft-tech-4",
        "companyId": "microsoft",
        "roundId": "microsoft-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "Validate Binary Search Tree",
        "question": "Given the root of a binary tree, determine if it is a valid binary search tree.",
        "answer": "```python\ndef isValidBST(root):\n    def helper(node, lower=float('-inf'), upper=float('inf')):\n        if not node:\n            return True\n        \n        val = node.val\n        if val <= lower or val >= upper:\n            return False\n        \n        return helper(node.left, lower, val) and helper(node.right, val, upper)\n    \n    return helper(root)\n```"
    },
    {
        "id": "microsoft-tech-5",
        "companyId": "microsoft",
        "roundId": "microsoft-technical",
        "type": "technical",
        "difficulty": "hard",
        "title": "Design Search Autocomplete System",
        "question": "Design a search autocomplete system that suggests at most 5 keywords after each character is typed.",
        "answer": "```python\nclass AutocompleteSystem:\n    def __init__(self, sentences, times):\n        self.root = {}\n        self.keyword = ''\n        for sentence, count in zip(sentences, times):\n            self.add_record(sentence, count)\n    \n    def add_record(self, sentence, count):\n        node = self.root\n        for c in sentence:\n            if c not in node:\n                node[c] = {}\n            node = node[c]\n        node['#'] = count\n    \n    def input(self, c):\n        if c == '#':\n            self.add_record(self.keyword, 1)\n            self.keyword = ''\n            return []\n        \n        self.keyword += c\n        node = self.root\n        for char in self.keyword:\n            if char not in node:\n                return []\n            node = node[char]\n        \n        res = []\n        self.dfs(node, self.keyword, res)\n        res.sort(key=lambda x: (-x[1], x[0]))\n        return [item[0] for item in res[:5]]\n    \n    def dfs(self, node, path, res):\n        if '#' in node:\n            res.append((path, node['#']))\n        for key in node:\n            if key != '#':\n                self.dfs(node[key], path+key, res)\n```"
    },
    {
        "id": "microsoft-tech-6",
        "companyId": "microsoft",
        "roundId": "microsoft-technical",
        "type": "technical",
        "difficulty": "medium",
        "title": "Rotate Image",
        "question": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).",
        "answer": "```python\ndef rotate(matrix):\n    n = len(matrix)\n    # Transpose matrix\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    # Reverse each row\n    for row in matrix:\n        row.reverse()\n```"
    }
]